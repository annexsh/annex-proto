// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: annex/tests/v1/test_service.proto

package testsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/annexsh/annex-proto/gen/go/annex/tests/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TestServiceName is the fully-qualified name of the TestService service.
	TestServiceName = "annex.tests.v1.TestService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TestServiceListContextsProcedure is the fully-qualified name of the TestService's ListContexts
	// RPC.
	TestServiceListContextsProcedure = "/annex.tests.v1.TestService/ListContexts"
	// TestServiceListGroupsProcedure is the fully-qualified name of the TestService's ListGroups RPC.
	TestServiceListGroupsProcedure = "/annex.tests.v1.TestService/ListGroups"
	// TestServiceListTestsProcedure is the fully-qualified name of the TestService's ListTests RPC.
	TestServiceListTestsProcedure = "/annex.tests.v1.TestService/ListTests"
	// TestServiceGetTestDefaultInputProcedure is the fully-qualified name of the TestService's
	// GetTestDefaultInput RPC.
	TestServiceGetTestDefaultInputProcedure = "/annex.tests.v1.TestService/GetTestDefaultInput"
	// TestServiceExecuteTestProcedure is the fully-qualified name of the TestService's ExecuteTest RPC.
	TestServiceExecuteTestProcedure = "/annex.tests.v1.TestService/ExecuteTest"
	// TestServiceRetryTestExecutionProcedure is the fully-qualified name of the TestService's
	// RetryTestExecution RPC.
	TestServiceRetryTestExecutionProcedure = "/annex.tests.v1.TestService/RetryTestExecution"
	// TestServiceGetTestExecutionProcedure is the fully-qualified name of the TestService's
	// GetTestExecution RPC.
	TestServiceGetTestExecutionProcedure = "/annex.tests.v1.TestService/GetTestExecution"
	// TestServiceListTestExecutionsProcedure is the fully-qualified name of the TestService's
	// ListTestExecutions RPC.
	TestServiceListTestExecutionsProcedure = "/annex.tests.v1.TestService/ListTestExecutions"
	// TestServiceListTestCaseExecutionsProcedure is the fully-qualified name of the TestService's
	// ListTestCaseExecutions RPC.
	TestServiceListTestCaseExecutionsProcedure = "/annex.tests.v1.TestService/ListTestCaseExecutions"
	// TestServiceListTestExecutionLogsProcedure is the fully-qualified name of the TestService's
	// ListTestExecutionLogs RPC.
	TestServiceListTestExecutionLogsProcedure = "/annex.tests.v1.TestService/ListTestExecutionLogs"
	// TestServiceRegisterContextProcedure is the fully-qualified name of the TestService's
	// RegisterContext RPC.
	TestServiceRegisterContextProcedure = "/annex.tests.v1.TestService/RegisterContext"
	// TestServiceRegisterGroupProcedure is the fully-qualified name of the TestService's RegisterGroup
	// RPC.
	TestServiceRegisterGroupProcedure = "/annex.tests.v1.TestService/RegisterGroup"
	// TestServiceRegisterTestsProcedure is the fully-qualified name of the TestService's RegisterTests
	// RPC.
	TestServiceRegisterTestsProcedure = "/annex.tests.v1.TestService/RegisterTests"
	// TestServiceAckTestExecutionStartedProcedure is the fully-qualified name of the TestService's
	// AckTestExecutionStarted RPC.
	TestServiceAckTestExecutionStartedProcedure = "/annex.tests.v1.TestService/AckTestExecutionStarted"
	// TestServiceAckTestExecutionFinishedProcedure is the fully-qualified name of the TestService's
	// AckTestExecutionFinished RPC.
	TestServiceAckTestExecutionFinishedProcedure = "/annex.tests.v1.TestService/AckTestExecutionFinished"
	// TestServiceAckCaseExecutionScheduledProcedure is the fully-qualified name of the TestService's
	// AckCaseExecutionScheduled RPC.
	TestServiceAckCaseExecutionScheduledProcedure = "/annex.tests.v1.TestService/AckCaseExecutionScheduled"
	// TestServiceAckCaseExecutionStartedProcedure is the fully-qualified name of the TestService's
	// AckCaseExecutionStarted RPC.
	TestServiceAckCaseExecutionStartedProcedure = "/annex.tests.v1.TestService/AckCaseExecutionStarted"
	// TestServiceAckCaseExecutionFinishedProcedure is the fully-qualified name of the TestService's
	// AckCaseExecutionFinished RPC.
	TestServiceAckCaseExecutionFinishedProcedure = "/annex.tests.v1.TestService/AckCaseExecutionFinished"
	// TestServicePublishTestExecutionLogProcedure is the fully-qualified name of the TestService's
	// PublishTestExecutionLog RPC.
	TestServicePublishTestExecutionLogProcedure = "/annex.tests.v1.TestService/PublishTestExecutionLog"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	testServiceServiceDescriptor                         = v1.File_annex_tests_v1_test_service_proto.Services().ByName("TestService")
	testServiceListContextsMethodDescriptor              = testServiceServiceDescriptor.Methods().ByName("ListContexts")
	testServiceListGroupsMethodDescriptor                = testServiceServiceDescriptor.Methods().ByName("ListGroups")
	testServiceListTestsMethodDescriptor                 = testServiceServiceDescriptor.Methods().ByName("ListTests")
	testServiceGetTestDefaultInputMethodDescriptor       = testServiceServiceDescriptor.Methods().ByName("GetTestDefaultInput")
	testServiceExecuteTestMethodDescriptor               = testServiceServiceDescriptor.Methods().ByName("ExecuteTest")
	testServiceRetryTestExecutionMethodDescriptor        = testServiceServiceDescriptor.Methods().ByName("RetryTestExecution")
	testServiceGetTestExecutionMethodDescriptor          = testServiceServiceDescriptor.Methods().ByName("GetTestExecution")
	testServiceListTestExecutionsMethodDescriptor        = testServiceServiceDescriptor.Methods().ByName("ListTestExecutions")
	testServiceListTestCaseExecutionsMethodDescriptor    = testServiceServiceDescriptor.Methods().ByName("ListTestCaseExecutions")
	testServiceListTestExecutionLogsMethodDescriptor     = testServiceServiceDescriptor.Methods().ByName("ListTestExecutionLogs")
	testServiceRegisterContextMethodDescriptor           = testServiceServiceDescriptor.Methods().ByName("RegisterContext")
	testServiceRegisterGroupMethodDescriptor             = testServiceServiceDescriptor.Methods().ByName("RegisterGroup")
	testServiceRegisterTestsMethodDescriptor             = testServiceServiceDescriptor.Methods().ByName("RegisterTests")
	testServiceAckTestExecutionStartedMethodDescriptor   = testServiceServiceDescriptor.Methods().ByName("AckTestExecutionStarted")
	testServiceAckTestExecutionFinishedMethodDescriptor  = testServiceServiceDescriptor.Methods().ByName("AckTestExecutionFinished")
	testServiceAckCaseExecutionScheduledMethodDescriptor = testServiceServiceDescriptor.Methods().ByName("AckCaseExecutionScheduled")
	testServiceAckCaseExecutionStartedMethodDescriptor   = testServiceServiceDescriptor.Methods().ByName("AckCaseExecutionStarted")
	testServiceAckCaseExecutionFinishedMethodDescriptor  = testServiceServiceDescriptor.Methods().ByName("AckCaseExecutionFinished")
	testServicePublishTestExecutionLogMethodDescriptor   = testServiceServiceDescriptor.Methods().ByName("PublishTestExecutionLog")
)

// TestServiceClient is a client for the annex.tests.v1.TestService service.
type TestServiceClient interface {
	ListContexts(context.Context, *connect.Request[v1.ListContextsRequest]) (*connect.Response[v1.ListContextsResponse], error)
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	ListTests(context.Context, *connect.Request[v1.ListTestsRequest]) (*connect.Response[v1.ListTestsResponse], error)
	GetTestDefaultInput(context.Context, *connect.Request[v1.GetTestDefaultInputRequest]) (*connect.Response[v1.GetTestDefaultInputResponse], error)
	ExecuteTest(context.Context, *connect.Request[v1.ExecuteTestRequest]) (*connect.Response[v1.ExecuteTestResponse], error)
	RetryTestExecution(context.Context, *connect.Request[v1.RetryTestExecutionRequest]) (*connect.Response[v1.RetryTestExecutionResponse], error)
	GetTestExecution(context.Context, *connect.Request[v1.GetTestExecutionRequest]) (*connect.Response[v1.GetTestExecutionResponse], error)
	ListTestExecutions(context.Context, *connect.Request[v1.ListTestExecutionsRequest]) (*connect.Response[v1.ListTestExecutionsResponse], error)
	ListTestCaseExecutions(context.Context, *connect.Request[v1.ListTestCaseExecutionsRequest]) (*connect.Response[v1.ListTestCaseExecutionsResponse], error)
	ListTestExecutionLogs(context.Context, *connect.Request[v1.ListTestExecutionLogsRequest]) (*connect.Response[v1.ListTestExecutionLogsResponse], error)
	RegisterContext(context.Context, *connect.Request[v1.RegisterContextRequest]) (*connect.Response[v1.RegisterContextResponse], error)
	RegisterGroup(context.Context, *connect.Request[v1.RegisterGroupRequest]) (*connect.Response[v1.RegisterGroupResponse], error)
	RegisterTests(context.Context, *connect.Request[v1.RegisterTestsRequest]) (*connect.Response[v1.RegisterTestsResponse], error)
	AckTestExecutionStarted(context.Context, *connect.Request[v1.AckTestExecutionStartedRequest]) (*connect.Response[v1.AckTestExecutionStartedResponse], error)
	AckTestExecutionFinished(context.Context, *connect.Request[v1.AckTestExecutionFinishedRequest]) (*connect.Response[v1.AckTestExecutionFinishedResponse], error)
	AckCaseExecutionScheduled(context.Context, *connect.Request[v1.AckCaseExecutionScheduledRequest]) (*connect.Response[v1.AckCaseExecutionScheduledResponse], error)
	AckCaseExecutionStarted(context.Context, *connect.Request[v1.AckCaseExecutionStartedRequest]) (*connect.Response[v1.AckCaseExecutionStartedResponse], error)
	AckCaseExecutionFinished(context.Context, *connect.Request[v1.AckCaseExecutionFinishedRequest]) (*connect.Response[v1.AckCaseExecutionFinishedResponse], error)
	PublishTestExecutionLog(context.Context, *connect.Request[v1.PublishTestExecutionLogRequest]) (*connect.Response[v1.PublishTestExecutionLogResponse], error)
}

// NewTestServiceClient constructs a client for the annex.tests.v1.TestService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTestServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TestServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &testServiceClient{
		listContexts: connect.NewClient[v1.ListContextsRequest, v1.ListContextsResponse](
			httpClient,
			baseURL+TestServiceListContextsProcedure,
			connect.WithSchema(testServiceListContextsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listGroups: connect.NewClient[v1.ListGroupsRequest, v1.ListGroupsResponse](
			httpClient,
			baseURL+TestServiceListGroupsProcedure,
			connect.WithSchema(testServiceListGroupsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTests: connect.NewClient[v1.ListTestsRequest, v1.ListTestsResponse](
			httpClient,
			baseURL+TestServiceListTestsProcedure,
			connect.WithSchema(testServiceListTestsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTestDefaultInput: connect.NewClient[v1.GetTestDefaultInputRequest, v1.GetTestDefaultInputResponse](
			httpClient,
			baseURL+TestServiceGetTestDefaultInputProcedure,
			connect.WithSchema(testServiceGetTestDefaultInputMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		executeTest: connect.NewClient[v1.ExecuteTestRequest, v1.ExecuteTestResponse](
			httpClient,
			baseURL+TestServiceExecuteTestProcedure,
			connect.WithSchema(testServiceExecuteTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		retryTestExecution: connect.NewClient[v1.RetryTestExecutionRequest, v1.RetryTestExecutionResponse](
			httpClient,
			baseURL+TestServiceRetryTestExecutionProcedure,
			connect.WithSchema(testServiceRetryTestExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getTestExecution: connect.NewClient[v1.GetTestExecutionRequest, v1.GetTestExecutionResponse](
			httpClient,
			baseURL+TestServiceGetTestExecutionProcedure,
			connect.WithSchema(testServiceGetTestExecutionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTestExecutions: connect.NewClient[v1.ListTestExecutionsRequest, v1.ListTestExecutionsResponse](
			httpClient,
			baseURL+TestServiceListTestExecutionsProcedure,
			connect.WithSchema(testServiceListTestExecutionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTestCaseExecutions: connect.NewClient[v1.ListTestCaseExecutionsRequest, v1.ListTestCaseExecutionsResponse](
			httpClient,
			baseURL+TestServiceListTestCaseExecutionsProcedure,
			connect.WithSchema(testServiceListTestCaseExecutionsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listTestExecutionLogs: connect.NewClient[v1.ListTestExecutionLogsRequest, v1.ListTestExecutionLogsResponse](
			httpClient,
			baseURL+TestServiceListTestExecutionLogsProcedure,
			connect.WithSchema(testServiceListTestExecutionLogsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerContext: connect.NewClient[v1.RegisterContextRequest, v1.RegisterContextResponse](
			httpClient,
			baseURL+TestServiceRegisterContextProcedure,
			connect.WithSchema(testServiceRegisterContextMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerGroup: connect.NewClient[v1.RegisterGroupRequest, v1.RegisterGroupResponse](
			httpClient,
			baseURL+TestServiceRegisterGroupProcedure,
			connect.WithSchema(testServiceRegisterGroupMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		registerTests: connect.NewClient[v1.RegisterTestsRequest, v1.RegisterTestsResponse](
			httpClient,
			baseURL+TestServiceRegisterTestsProcedure,
			connect.WithSchema(testServiceRegisterTestsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ackTestExecutionStarted: connect.NewClient[v1.AckTestExecutionStartedRequest, v1.AckTestExecutionStartedResponse](
			httpClient,
			baseURL+TestServiceAckTestExecutionStartedProcedure,
			connect.WithSchema(testServiceAckTestExecutionStartedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ackTestExecutionFinished: connect.NewClient[v1.AckTestExecutionFinishedRequest, v1.AckTestExecutionFinishedResponse](
			httpClient,
			baseURL+TestServiceAckTestExecutionFinishedProcedure,
			connect.WithSchema(testServiceAckTestExecutionFinishedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ackCaseExecutionScheduled: connect.NewClient[v1.AckCaseExecutionScheduledRequest, v1.AckCaseExecutionScheduledResponse](
			httpClient,
			baseURL+TestServiceAckCaseExecutionScheduledProcedure,
			connect.WithSchema(testServiceAckCaseExecutionScheduledMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ackCaseExecutionStarted: connect.NewClient[v1.AckCaseExecutionStartedRequest, v1.AckCaseExecutionStartedResponse](
			httpClient,
			baseURL+TestServiceAckCaseExecutionStartedProcedure,
			connect.WithSchema(testServiceAckCaseExecutionStartedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ackCaseExecutionFinished: connect.NewClient[v1.AckCaseExecutionFinishedRequest, v1.AckCaseExecutionFinishedResponse](
			httpClient,
			baseURL+TestServiceAckCaseExecutionFinishedProcedure,
			connect.WithSchema(testServiceAckCaseExecutionFinishedMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		publishTestExecutionLog: connect.NewClient[v1.PublishTestExecutionLogRequest, v1.PublishTestExecutionLogResponse](
			httpClient,
			baseURL+TestServicePublishTestExecutionLogProcedure,
			connect.WithSchema(testServicePublishTestExecutionLogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// testServiceClient implements TestServiceClient.
type testServiceClient struct {
	listContexts              *connect.Client[v1.ListContextsRequest, v1.ListContextsResponse]
	listGroups                *connect.Client[v1.ListGroupsRequest, v1.ListGroupsResponse]
	listTests                 *connect.Client[v1.ListTestsRequest, v1.ListTestsResponse]
	getTestDefaultInput       *connect.Client[v1.GetTestDefaultInputRequest, v1.GetTestDefaultInputResponse]
	executeTest               *connect.Client[v1.ExecuteTestRequest, v1.ExecuteTestResponse]
	retryTestExecution        *connect.Client[v1.RetryTestExecutionRequest, v1.RetryTestExecutionResponse]
	getTestExecution          *connect.Client[v1.GetTestExecutionRequest, v1.GetTestExecutionResponse]
	listTestExecutions        *connect.Client[v1.ListTestExecutionsRequest, v1.ListTestExecutionsResponse]
	listTestCaseExecutions    *connect.Client[v1.ListTestCaseExecutionsRequest, v1.ListTestCaseExecutionsResponse]
	listTestExecutionLogs     *connect.Client[v1.ListTestExecutionLogsRequest, v1.ListTestExecutionLogsResponse]
	registerContext           *connect.Client[v1.RegisterContextRequest, v1.RegisterContextResponse]
	registerGroup             *connect.Client[v1.RegisterGroupRequest, v1.RegisterGroupResponse]
	registerTests             *connect.Client[v1.RegisterTestsRequest, v1.RegisterTestsResponse]
	ackTestExecutionStarted   *connect.Client[v1.AckTestExecutionStartedRequest, v1.AckTestExecutionStartedResponse]
	ackTestExecutionFinished  *connect.Client[v1.AckTestExecutionFinishedRequest, v1.AckTestExecutionFinishedResponse]
	ackCaseExecutionScheduled *connect.Client[v1.AckCaseExecutionScheduledRequest, v1.AckCaseExecutionScheduledResponse]
	ackCaseExecutionStarted   *connect.Client[v1.AckCaseExecutionStartedRequest, v1.AckCaseExecutionStartedResponse]
	ackCaseExecutionFinished  *connect.Client[v1.AckCaseExecutionFinishedRequest, v1.AckCaseExecutionFinishedResponse]
	publishTestExecutionLog   *connect.Client[v1.PublishTestExecutionLogRequest, v1.PublishTestExecutionLogResponse]
}

// ListContexts calls annex.tests.v1.TestService.ListContexts.
func (c *testServiceClient) ListContexts(ctx context.Context, req *connect.Request[v1.ListContextsRequest]) (*connect.Response[v1.ListContextsResponse], error) {
	return c.listContexts.CallUnary(ctx, req)
}

// ListGroups calls annex.tests.v1.TestService.ListGroups.
func (c *testServiceClient) ListGroups(ctx context.Context, req *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// ListTests calls annex.tests.v1.TestService.ListTests.
func (c *testServiceClient) ListTests(ctx context.Context, req *connect.Request[v1.ListTestsRequest]) (*connect.Response[v1.ListTestsResponse], error) {
	return c.listTests.CallUnary(ctx, req)
}

// GetTestDefaultInput calls annex.tests.v1.TestService.GetTestDefaultInput.
func (c *testServiceClient) GetTestDefaultInput(ctx context.Context, req *connect.Request[v1.GetTestDefaultInputRequest]) (*connect.Response[v1.GetTestDefaultInputResponse], error) {
	return c.getTestDefaultInput.CallUnary(ctx, req)
}

// ExecuteTest calls annex.tests.v1.TestService.ExecuteTest.
func (c *testServiceClient) ExecuteTest(ctx context.Context, req *connect.Request[v1.ExecuteTestRequest]) (*connect.Response[v1.ExecuteTestResponse], error) {
	return c.executeTest.CallUnary(ctx, req)
}

// RetryTestExecution calls annex.tests.v1.TestService.RetryTestExecution.
func (c *testServiceClient) RetryTestExecution(ctx context.Context, req *connect.Request[v1.RetryTestExecutionRequest]) (*connect.Response[v1.RetryTestExecutionResponse], error) {
	return c.retryTestExecution.CallUnary(ctx, req)
}

// GetTestExecution calls annex.tests.v1.TestService.GetTestExecution.
func (c *testServiceClient) GetTestExecution(ctx context.Context, req *connect.Request[v1.GetTestExecutionRequest]) (*connect.Response[v1.GetTestExecutionResponse], error) {
	return c.getTestExecution.CallUnary(ctx, req)
}

// ListTestExecutions calls annex.tests.v1.TestService.ListTestExecutions.
func (c *testServiceClient) ListTestExecutions(ctx context.Context, req *connect.Request[v1.ListTestExecutionsRequest]) (*connect.Response[v1.ListTestExecutionsResponse], error) {
	return c.listTestExecutions.CallUnary(ctx, req)
}

// ListTestCaseExecutions calls annex.tests.v1.TestService.ListTestCaseExecutions.
func (c *testServiceClient) ListTestCaseExecutions(ctx context.Context, req *connect.Request[v1.ListTestCaseExecutionsRequest]) (*connect.Response[v1.ListTestCaseExecutionsResponse], error) {
	return c.listTestCaseExecutions.CallUnary(ctx, req)
}

// ListTestExecutionLogs calls annex.tests.v1.TestService.ListTestExecutionLogs.
func (c *testServiceClient) ListTestExecutionLogs(ctx context.Context, req *connect.Request[v1.ListTestExecutionLogsRequest]) (*connect.Response[v1.ListTestExecutionLogsResponse], error) {
	return c.listTestExecutionLogs.CallUnary(ctx, req)
}

// RegisterContext calls annex.tests.v1.TestService.RegisterContext.
func (c *testServiceClient) RegisterContext(ctx context.Context, req *connect.Request[v1.RegisterContextRequest]) (*connect.Response[v1.RegisterContextResponse], error) {
	return c.registerContext.CallUnary(ctx, req)
}

// RegisterGroup calls annex.tests.v1.TestService.RegisterGroup.
func (c *testServiceClient) RegisterGroup(ctx context.Context, req *connect.Request[v1.RegisterGroupRequest]) (*connect.Response[v1.RegisterGroupResponse], error) {
	return c.registerGroup.CallUnary(ctx, req)
}

// RegisterTests calls annex.tests.v1.TestService.RegisterTests.
func (c *testServiceClient) RegisterTests(ctx context.Context, req *connect.Request[v1.RegisterTestsRequest]) (*connect.Response[v1.RegisterTestsResponse], error) {
	return c.registerTests.CallUnary(ctx, req)
}

// AckTestExecutionStarted calls annex.tests.v1.TestService.AckTestExecutionStarted.
func (c *testServiceClient) AckTestExecutionStarted(ctx context.Context, req *connect.Request[v1.AckTestExecutionStartedRequest]) (*connect.Response[v1.AckTestExecutionStartedResponse], error) {
	return c.ackTestExecutionStarted.CallUnary(ctx, req)
}

// AckTestExecutionFinished calls annex.tests.v1.TestService.AckTestExecutionFinished.
func (c *testServiceClient) AckTestExecutionFinished(ctx context.Context, req *connect.Request[v1.AckTestExecutionFinishedRequest]) (*connect.Response[v1.AckTestExecutionFinishedResponse], error) {
	return c.ackTestExecutionFinished.CallUnary(ctx, req)
}

// AckCaseExecutionScheduled calls annex.tests.v1.TestService.AckCaseExecutionScheduled.
func (c *testServiceClient) AckCaseExecutionScheduled(ctx context.Context, req *connect.Request[v1.AckCaseExecutionScheduledRequest]) (*connect.Response[v1.AckCaseExecutionScheduledResponse], error) {
	return c.ackCaseExecutionScheduled.CallUnary(ctx, req)
}

// AckCaseExecutionStarted calls annex.tests.v1.TestService.AckCaseExecutionStarted.
func (c *testServiceClient) AckCaseExecutionStarted(ctx context.Context, req *connect.Request[v1.AckCaseExecutionStartedRequest]) (*connect.Response[v1.AckCaseExecutionStartedResponse], error) {
	return c.ackCaseExecutionStarted.CallUnary(ctx, req)
}

// AckCaseExecutionFinished calls annex.tests.v1.TestService.AckCaseExecutionFinished.
func (c *testServiceClient) AckCaseExecutionFinished(ctx context.Context, req *connect.Request[v1.AckCaseExecutionFinishedRequest]) (*connect.Response[v1.AckCaseExecutionFinishedResponse], error) {
	return c.ackCaseExecutionFinished.CallUnary(ctx, req)
}

// PublishTestExecutionLog calls annex.tests.v1.TestService.PublishTestExecutionLog.
func (c *testServiceClient) PublishTestExecutionLog(ctx context.Context, req *connect.Request[v1.PublishTestExecutionLogRequest]) (*connect.Response[v1.PublishTestExecutionLogResponse], error) {
	return c.publishTestExecutionLog.CallUnary(ctx, req)
}

// TestServiceHandler is an implementation of the annex.tests.v1.TestService service.
type TestServiceHandler interface {
	ListContexts(context.Context, *connect.Request[v1.ListContextsRequest]) (*connect.Response[v1.ListContextsResponse], error)
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	ListTests(context.Context, *connect.Request[v1.ListTestsRequest]) (*connect.Response[v1.ListTestsResponse], error)
	GetTestDefaultInput(context.Context, *connect.Request[v1.GetTestDefaultInputRequest]) (*connect.Response[v1.GetTestDefaultInputResponse], error)
	ExecuteTest(context.Context, *connect.Request[v1.ExecuteTestRequest]) (*connect.Response[v1.ExecuteTestResponse], error)
	RetryTestExecution(context.Context, *connect.Request[v1.RetryTestExecutionRequest]) (*connect.Response[v1.RetryTestExecutionResponse], error)
	GetTestExecution(context.Context, *connect.Request[v1.GetTestExecutionRequest]) (*connect.Response[v1.GetTestExecutionResponse], error)
	ListTestExecutions(context.Context, *connect.Request[v1.ListTestExecutionsRequest]) (*connect.Response[v1.ListTestExecutionsResponse], error)
	ListTestCaseExecutions(context.Context, *connect.Request[v1.ListTestCaseExecutionsRequest]) (*connect.Response[v1.ListTestCaseExecutionsResponse], error)
	ListTestExecutionLogs(context.Context, *connect.Request[v1.ListTestExecutionLogsRequest]) (*connect.Response[v1.ListTestExecutionLogsResponse], error)
	RegisterContext(context.Context, *connect.Request[v1.RegisterContextRequest]) (*connect.Response[v1.RegisterContextResponse], error)
	RegisterGroup(context.Context, *connect.Request[v1.RegisterGroupRequest]) (*connect.Response[v1.RegisterGroupResponse], error)
	RegisterTests(context.Context, *connect.Request[v1.RegisterTestsRequest]) (*connect.Response[v1.RegisterTestsResponse], error)
	AckTestExecutionStarted(context.Context, *connect.Request[v1.AckTestExecutionStartedRequest]) (*connect.Response[v1.AckTestExecutionStartedResponse], error)
	AckTestExecutionFinished(context.Context, *connect.Request[v1.AckTestExecutionFinishedRequest]) (*connect.Response[v1.AckTestExecutionFinishedResponse], error)
	AckCaseExecutionScheduled(context.Context, *connect.Request[v1.AckCaseExecutionScheduledRequest]) (*connect.Response[v1.AckCaseExecutionScheduledResponse], error)
	AckCaseExecutionStarted(context.Context, *connect.Request[v1.AckCaseExecutionStartedRequest]) (*connect.Response[v1.AckCaseExecutionStartedResponse], error)
	AckCaseExecutionFinished(context.Context, *connect.Request[v1.AckCaseExecutionFinishedRequest]) (*connect.Response[v1.AckCaseExecutionFinishedResponse], error)
	PublishTestExecutionLog(context.Context, *connect.Request[v1.PublishTestExecutionLogRequest]) (*connect.Response[v1.PublishTestExecutionLogResponse], error)
}

// NewTestServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTestServiceHandler(svc TestServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	testServiceListContextsHandler := connect.NewUnaryHandler(
		TestServiceListContextsProcedure,
		svc.ListContexts,
		connect.WithSchema(testServiceListContextsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceListGroupsHandler := connect.NewUnaryHandler(
		TestServiceListGroupsProcedure,
		svc.ListGroups,
		connect.WithSchema(testServiceListGroupsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceListTestsHandler := connect.NewUnaryHandler(
		TestServiceListTestsProcedure,
		svc.ListTests,
		connect.WithSchema(testServiceListTestsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceGetTestDefaultInputHandler := connect.NewUnaryHandler(
		TestServiceGetTestDefaultInputProcedure,
		svc.GetTestDefaultInput,
		connect.WithSchema(testServiceGetTestDefaultInputMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceExecuteTestHandler := connect.NewUnaryHandler(
		TestServiceExecuteTestProcedure,
		svc.ExecuteTest,
		connect.WithSchema(testServiceExecuteTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceRetryTestExecutionHandler := connect.NewUnaryHandler(
		TestServiceRetryTestExecutionProcedure,
		svc.RetryTestExecution,
		connect.WithSchema(testServiceRetryTestExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceGetTestExecutionHandler := connect.NewUnaryHandler(
		TestServiceGetTestExecutionProcedure,
		svc.GetTestExecution,
		connect.WithSchema(testServiceGetTestExecutionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceListTestExecutionsHandler := connect.NewUnaryHandler(
		TestServiceListTestExecutionsProcedure,
		svc.ListTestExecutions,
		connect.WithSchema(testServiceListTestExecutionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceListTestCaseExecutionsHandler := connect.NewUnaryHandler(
		TestServiceListTestCaseExecutionsProcedure,
		svc.ListTestCaseExecutions,
		connect.WithSchema(testServiceListTestCaseExecutionsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceListTestExecutionLogsHandler := connect.NewUnaryHandler(
		TestServiceListTestExecutionLogsProcedure,
		svc.ListTestExecutionLogs,
		connect.WithSchema(testServiceListTestExecutionLogsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceRegisterContextHandler := connect.NewUnaryHandler(
		TestServiceRegisterContextProcedure,
		svc.RegisterContext,
		connect.WithSchema(testServiceRegisterContextMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceRegisterGroupHandler := connect.NewUnaryHandler(
		TestServiceRegisterGroupProcedure,
		svc.RegisterGroup,
		connect.WithSchema(testServiceRegisterGroupMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceRegisterTestsHandler := connect.NewUnaryHandler(
		TestServiceRegisterTestsProcedure,
		svc.RegisterTests,
		connect.WithSchema(testServiceRegisterTestsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceAckTestExecutionStartedHandler := connect.NewUnaryHandler(
		TestServiceAckTestExecutionStartedProcedure,
		svc.AckTestExecutionStarted,
		connect.WithSchema(testServiceAckTestExecutionStartedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceAckTestExecutionFinishedHandler := connect.NewUnaryHandler(
		TestServiceAckTestExecutionFinishedProcedure,
		svc.AckTestExecutionFinished,
		connect.WithSchema(testServiceAckTestExecutionFinishedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceAckCaseExecutionScheduledHandler := connect.NewUnaryHandler(
		TestServiceAckCaseExecutionScheduledProcedure,
		svc.AckCaseExecutionScheduled,
		connect.WithSchema(testServiceAckCaseExecutionScheduledMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceAckCaseExecutionStartedHandler := connect.NewUnaryHandler(
		TestServiceAckCaseExecutionStartedProcedure,
		svc.AckCaseExecutionStarted,
		connect.WithSchema(testServiceAckCaseExecutionStartedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServiceAckCaseExecutionFinishedHandler := connect.NewUnaryHandler(
		TestServiceAckCaseExecutionFinishedProcedure,
		svc.AckCaseExecutionFinished,
		connect.WithSchema(testServiceAckCaseExecutionFinishedMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	testServicePublishTestExecutionLogHandler := connect.NewUnaryHandler(
		TestServicePublishTestExecutionLogProcedure,
		svc.PublishTestExecutionLog,
		connect.WithSchema(testServicePublishTestExecutionLogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/annex.tests.v1.TestService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TestServiceListContextsProcedure:
			testServiceListContextsHandler.ServeHTTP(w, r)
		case TestServiceListGroupsProcedure:
			testServiceListGroupsHandler.ServeHTTP(w, r)
		case TestServiceListTestsProcedure:
			testServiceListTestsHandler.ServeHTTP(w, r)
		case TestServiceGetTestDefaultInputProcedure:
			testServiceGetTestDefaultInputHandler.ServeHTTP(w, r)
		case TestServiceExecuteTestProcedure:
			testServiceExecuteTestHandler.ServeHTTP(w, r)
		case TestServiceRetryTestExecutionProcedure:
			testServiceRetryTestExecutionHandler.ServeHTTP(w, r)
		case TestServiceGetTestExecutionProcedure:
			testServiceGetTestExecutionHandler.ServeHTTP(w, r)
		case TestServiceListTestExecutionsProcedure:
			testServiceListTestExecutionsHandler.ServeHTTP(w, r)
		case TestServiceListTestCaseExecutionsProcedure:
			testServiceListTestCaseExecutionsHandler.ServeHTTP(w, r)
		case TestServiceListTestExecutionLogsProcedure:
			testServiceListTestExecutionLogsHandler.ServeHTTP(w, r)
		case TestServiceRegisterContextProcedure:
			testServiceRegisterContextHandler.ServeHTTP(w, r)
		case TestServiceRegisterGroupProcedure:
			testServiceRegisterGroupHandler.ServeHTTP(w, r)
		case TestServiceRegisterTestsProcedure:
			testServiceRegisterTestsHandler.ServeHTTP(w, r)
		case TestServiceAckTestExecutionStartedProcedure:
			testServiceAckTestExecutionStartedHandler.ServeHTTP(w, r)
		case TestServiceAckTestExecutionFinishedProcedure:
			testServiceAckTestExecutionFinishedHandler.ServeHTTP(w, r)
		case TestServiceAckCaseExecutionScheduledProcedure:
			testServiceAckCaseExecutionScheduledHandler.ServeHTTP(w, r)
		case TestServiceAckCaseExecutionStartedProcedure:
			testServiceAckCaseExecutionStartedHandler.ServeHTTP(w, r)
		case TestServiceAckCaseExecutionFinishedProcedure:
			testServiceAckCaseExecutionFinishedHandler.ServeHTTP(w, r)
		case TestServicePublishTestExecutionLogProcedure:
			testServicePublishTestExecutionLogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTestServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTestServiceHandler struct{}

func (UnimplementedTestServiceHandler) ListContexts(context.Context, *connect.Request[v1.ListContextsRequest]) (*connect.Response[v1.ListContextsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ListContexts is not implemented"))
}

func (UnimplementedTestServiceHandler) ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ListGroups is not implemented"))
}

func (UnimplementedTestServiceHandler) ListTests(context.Context, *connect.Request[v1.ListTestsRequest]) (*connect.Response[v1.ListTestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ListTests is not implemented"))
}

func (UnimplementedTestServiceHandler) GetTestDefaultInput(context.Context, *connect.Request[v1.GetTestDefaultInputRequest]) (*connect.Response[v1.GetTestDefaultInputResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.GetTestDefaultInput is not implemented"))
}

func (UnimplementedTestServiceHandler) ExecuteTest(context.Context, *connect.Request[v1.ExecuteTestRequest]) (*connect.Response[v1.ExecuteTestResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ExecuteTest is not implemented"))
}

func (UnimplementedTestServiceHandler) RetryTestExecution(context.Context, *connect.Request[v1.RetryTestExecutionRequest]) (*connect.Response[v1.RetryTestExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.RetryTestExecution is not implemented"))
}

func (UnimplementedTestServiceHandler) GetTestExecution(context.Context, *connect.Request[v1.GetTestExecutionRequest]) (*connect.Response[v1.GetTestExecutionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.GetTestExecution is not implemented"))
}

func (UnimplementedTestServiceHandler) ListTestExecutions(context.Context, *connect.Request[v1.ListTestExecutionsRequest]) (*connect.Response[v1.ListTestExecutionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ListTestExecutions is not implemented"))
}

func (UnimplementedTestServiceHandler) ListTestCaseExecutions(context.Context, *connect.Request[v1.ListTestCaseExecutionsRequest]) (*connect.Response[v1.ListTestCaseExecutionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ListTestCaseExecutions is not implemented"))
}

func (UnimplementedTestServiceHandler) ListTestExecutionLogs(context.Context, *connect.Request[v1.ListTestExecutionLogsRequest]) (*connect.Response[v1.ListTestExecutionLogsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.ListTestExecutionLogs is not implemented"))
}

func (UnimplementedTestServiceHandler) RegisterContext(context.Context, *connect.Request[v1.RegisterContextRequest]) (*connect.Response[v1.RegisterContextResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.RegisterContext is not implemented"))
}

func (UnimplementedTestServiceHandler) RegisterGroup(context.Context, *connect.Request[v1.RegisterGroupRequest]) (*connect.Response[v1.RegisterGroupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.RegisterGroup is not implemented"))
}

func (UnimplementedTestServiceHandler) RegisterTests(context.Context, *connect.Request[v1.RegisterTestsRequest]) (*connect.Response[v1.RegisterTestsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.RegisterTests is not implemented"))
}

func (UnimplementedTestServiceHandler) AckTestExecutionStarted(context.Context, *connect.Request[v1.AckTestExecutionStartedRequest]) (*connect.Response[v1.AckTestExecutionStartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.AckTestExecutionStarted is not implemented"))
}

func (UnimplementedTestServiceHandler) AckTestExecutionFinished(context.Context, *connect.Request[v1.AckTestExecutionFinishedRequest]) (*connect.Response[v1.AckTestExecutionFinishedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.AckTestExecutionFinished is not implemented"))
}

func (UnimplementedTestServiceHandler) AckCaseExecutionScheduled(context.Context, *connect.Request[v1.AckCaseExecutionScheduledRequest]) (*connect.Response[v1.AckCaseExecutionScheduledResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.AckCaseExecutionScheduled is not implemented"))
}

func (UnimplementedTestServiceHandler) AckCaseExecutionStarted(context.Context, *connect.Request[v1.AckCaseExecutionStartedRequest]) (*connect.Response[v1.AckCaseExecutionStartedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.AckCaseExecutionStarted is not implemented"))
}

func (UnimplementedTestServiceHandler) AckCaseExecutionFinished(context.Context, *connect.Request[v1.AckCaseExecutionFinishedRequest]) (*connect.Response[v1.AckCaseExecutionFinishedResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.AckCaseExecutionFinished is not implemented"))
}

func (UnimplementedTestServiceHandler) PublishTestExecutionLog(context.Context, *connect.Request[v1.PublishTestExecutionLogRequest]) (*connect.Response[v1.PublishTestExecutionLogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("annex.tests.v1.TestService.PublishTestExecutionLog is not implemented"))
}
