// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: annex/tests/v1/test_service.proto

package testsv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegisterContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *RegisterContextRequest) Reset() {
	*x = RegisterContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterContextRequest) ProtoMessage() {}

func (x *RegisterContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterContextRequest.ProtoReflect.Descriptor instead.
func (*RegisterContextRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{0}
}

func (x *RegisterContextRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type RegisterContextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterContextResponse) Reset() {
	*x = RegisterContextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterContextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterContextResponse) ProtoMessage() {}

func (x *RegisterContextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterContextResponse.ProtoReflect.Descriptor instead.
func (*RegisterContextResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{1}
}

type ListContextsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListContextsRequest) Reset() {
	*x = ListContextsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContextsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContextsRequest) ProtoMessage() {}

func (x *ListContextsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContextsRequest.ProtoReflect.Descriptor instead.
func (*ListContextsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{2}
}

type ListContextsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contexts []string `protobuf:"bytes,1,rep,name=contexts,proto3" json:"contexts,omitempty"`
}

func (x *ListContextsResponse) Reset() {
	*x = ListContextsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListContextsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListContextsResponse) ProtoMessage() {}

func (x *ListContextsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListContextsResponse.ProtoReflect.Descriptor instead.
func (*ListContextsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListContextsResponse) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

type RegisterGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RegisterGroupRequest) Reset() {
	*x = RegisterGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterGroupRequest) ProtoMessage() {}

func (x *RegisterGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterGroupRequest.ProtoReflect.Descriptor instead.
func (*RegisterGroupRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterGroupRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RegisterGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegisterGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterGroupResponse) Reset() {
	*x = RegisterGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterGroupResponse) ProtoMessage() {}

func (x *RegisterGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterGroupResponse.ProtoReflect.Descriptor instead.
func (*RegisterGroupResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{5}
}

type ListGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ListGroupsRequest) Reset() {
	*x = ListGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsRequest) ProtoMessage() {}

func (x *ListGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListGroupsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{6}
}

func (x *ListGroupsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type ListGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *ListGroupsResponse) Reset() {
	*x = ListGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListGroupsResponse) ProtoMessage() {}

func (x *ListGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListGroupsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListGroupsResponse) GetGroups() []*Group {
	if x != nil {
		return x.Groups
	}
	return nil
}

type RegisterTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context     string            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Group       string            `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Definitions []*TestDefinition `protobuf:"bytes,4,rep,name=definitions,proto3" json:"definitions,omitempty"`
}

func (x *RegisterTestsRequest) Reset() {
	*x = RegisterTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTestsRequest) ProtoMessage() {}

func (x *RegisterTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTestsRequest.ProtoReflect.Descriptor instead.
func (*RegisterTestsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterTestsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RegisterTestsRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RegisterTestsRequest) GetDefinitions() []*TestDefinition {
	if x != nil {
		return x.Definitions
	}
	return nil
}

type RegisterTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests []*Test `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
}

func (x *RegisterTestsResponse) Reset() {
	*x = RegisterTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterTestsResponse) ProtoMessage() {}

func (x *RegisterTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterTestsResponse.ProtoReflect.Descriptor instead.
func (*RegisterTestsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{9}
}

func (x *RegisterTestsResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

type ListTestsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context       string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Group         string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	PageSize      int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestsRequest) Reset() {
	*x = ListTestsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsRequest) ProtoMessage() {}

func (x *ListTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsRequest.ProtoReflect.Descriptor instead.
func (*ListTestsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListTestsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ListTestsRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ListTestsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestsRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListTestsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tests         []*Test `protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	NextPageToken string  `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestsResponse) Reset() {
	*x = ListTestsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestsResponse) ProtoMessage() {}

func (x *ListTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestsResponse.ProtoReflect.Descriptor instead.
func (*ListTestsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListTestsResponse) GetTests() []*Test {
	if x != nil {
		return x.Tests
	}
	return nil
}

func (x *ListTestsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetTestDefaultInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestId  string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
}

func (x *GetTestDefaultInputRequest) Reset() {
	*x = GetTestDefaultInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestDefaultInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestDefaultInputRequest) ProtoMessage() {}

func (x *GetTestDefaultInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestDefaultInputRequest.ProtoReflect.Descriptor instead.
func (*GetTestDefaultInputRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetTestDefaultInputRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *GetTestDefaultInputRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

type GetTestDefaultInputResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultInput string `protobuf:"bytes,1,opt,name=default_input,json=defaultInput,proto3" json:"default_input,omitempty"`
}

func (x *GetTestDefaultInputResponse) Reset() {
	*x = GetTestDefaultInputResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestDefaultInputResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestDefaultInputResponse) ProtoMessage() {}

func (x *GetTestDefaultInputResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestDefaultInputResponse.ProtoReflect.Descriptor instead.
func (*GetTestDefaultInputResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTestDefaultInputResponse) GetDefaultInput() string {
	if x != nil {
		return x.DefaultInput
	}
	return ""
}

type ExecuteTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string   `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestId  string   `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	Input   *Payload `protobuf:"bytes,3,opt,name=input,proto3,oneof" json:"input,omitempty"`
}

func (x *ExecuteTestRequest) Reset() {
	*x = ExecuteTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTestRequest) ProtoMessage() {}

func (x *ExecuteTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTestRequest.ProtoReflect.Descriptor instead.
func (*ExecuteTestRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{14}
}

func (x *ExecuteTestRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ExecuteTestRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ExecuteTestRequest) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

type ExecuteTestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestExecution *TestExecution `protobuf:"bytes,1,opt,name=test_execution,json=testExecution,proto3" json:"test_execution,omitempty"`
}

func (x *ExecuteTestResponse) Reset() {
	*x = ExecuteTestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteTestResponse) ProtoMessage() {}

func (x *ExecuteTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteTestResponse.ProtoReflect.Descriptor instead.
func (*ExecuteTestResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{15}
}

func (x *ExecuteTestResponse) GetTestExecution() *TestExecution {
	if x != nil {
		return x.TestExecution
	}
	return nil
}

type RetryTestExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
}

func (x *RetryTestExecutionRequest) Reset() {
	*x = RetryTestExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTestExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTestExecutionRequest) ProtoMessage() {}

func (x *RetryTestExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTestExecutionRequest.ProtoReflect.Descriptor instead.
func (*RetryTestExecutionRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{16}
}

func (x *RetryTestExecutionRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RetryTestExecutionRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

type RetryTestExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestExecution *TestExecution `protobuf:"bytes,1,opt,name=test_execution,json=testExecution,proto3" json:"test_execution,omitempty"`
}

func (x *RetryTestExecutionResponse) Reset() {
	*x = RetryTestExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetryTestExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryTestExecutionResponse) ProtoMessage() {}

func (x *RetryTestExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryTestExecutionResponse.ProtoReflect.Descriptor instead.
func (*RetryTestExecutionResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{17}
}

func (x *RetryTestExecutionResponse) GetTestExecution() *TestExecution {
	if x != nil {
		return x.TestExecution
	}
	return nil
}

type GetTestExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
}

func (x *GetTestExecutionRequest) Reset() {
	*x = GetTestExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestExecutionRequest) ProtoMessage() {}

func (x *GetTestExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestExecutionRequest.ProtoReflect.Descriptor instead.
func (*GetTestExecutionRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{18}
}

func (x *GetTestExecutionRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *GetTestExecutionRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

type GetTestExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestExecution *TestExecution `protobuf:"bytes,1,opt,name=test_execution,json=testExecution,proto3" json:"test_execution,omitempty"`
	Input         *Payload       `protobuf:"bytes,2,opt,name=input,proto3,oneof" json:"input,omitempty"`
}

func (x *GetTestExecutionResponse) Reset() {
	*x = GetTestExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestExecutionResponse) ProtoMessage() {}

func (x *GetTestExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestExecutionResponse.ProtoReflect.Descriptor instead.
func (*GetTestExecutionResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetTestExecutionResponse) GetTestExecution() *TestExecution {
	if x != nil {
		return x.TestExecution
	}
	return nil
}

func (x *GetTestExecutionResponse) GetInput() *Payload {
	if x != nil {
		return x.Input
	}
	return nil
}

type ListTestExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context       string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestId        string `protobuf:"bytes,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	PageSize      int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	NextPageToken string `protobuf:"bytes,4,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestExecutionsRequest) Reset() {
	*x = ListTestExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestExecutionsRequest) ProtoMessage() {}

func (x *ListTestExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTestExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{20}
}

func (x *ListTestExecutionsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ListTestExecutionsRequest) GetTestId() string {
	if x != nil {
		return x.TestId
	}
	return ""
}

func (x *ListTestExecutionsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTestExecutionsRequest) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListTestExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestExecutions []*TestExecution `protobuf:"bytes,1,rep,name=test_executions,json=testExecutions,proto3" json:"test_executions,omitempty"`
	NextPageToken  string           `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListTestExecutionsResponse) Reset() {
	*x = ListTestExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestExecutionsResponse) ProtoMessage() {}

func (x *ListTestExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListTestExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{21}
}

func (x *ListTestExecutionsResponse) GetTestExecutions() []*TestExecution {
	if x != nil {
		return x.TestExecutions
	}
	return nil
}

func (x *ListTestExecutionsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type ListTestCaseExecutionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
}

func (x *ListTestCaseExecutionsRequest) Reset() {
	*x = ListTestCaseExecutionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCaseExecutionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCaseExecutionsRequest) ProtoMessage() {}

func (x *ListTestCaseExecutionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCaseExecutionsRequest.ProtoReflect.Descriptor instead.
func (*ListTestCaseExecutionsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{22}
}

func (x *ListTestCaseExecutionsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ListTestCaseExecutionsRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

type ListTestCaseExecutionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseExecutions []*CaseExecution `protobuf:"bytes,1,rep,name=case_executions,json=caseExecutions,proto3" json:"case_executions,omitempty"`
}

func (x *ListTestCaseExecutionsResponse) Reset() {
	*x = ListTestCaseExecutionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestCaseExecutionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestCaseExecutionsResponse) ProtoMessage() {}

func (x *ListTestCaseExecutionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestCaseExecutionsResponse.ProtoReflect.Descriptor instead.
func (*ListTestCaseExecutionsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{23}
}

func (x *ListTestCaseExecutionsResponse) GetCaseExecutions() []*CaseExecution {
	if x != nil {
		return x.CaseExecutions
	}
	return nil
}

type AckTestExecutionStartedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string                 `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *AckTestExecutionStartedRequest) Reset() {
	*x = AckTestExecutionStartedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckTestExecutionStartedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckTestExecutionStartedRequest) ProtoMessage() {}

func (x *AckTestExecutionStartedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckTestExecutionStartedRequest.ProtoReflect.Descriptor instead.
func (*AckTestExecutionStartedRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{24}
}

func (x *AckTestExecutionStartedRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AckTestExecutionStartedRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

func (x *AckTestExecutionStartedRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type AckTestExecutionStartedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckTestExecutionStartedResponse) Reset() {
	*x = AckTestExecutionStartedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckTestExecutionStartedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckTestExecutionStartedResponse) ProtoMessage() {}

func (x *AckTestExecutionStartedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckTestExecutionStartedResponse.ProtoReflect.Descriptor instead.
func (*AckTestExecutionStartedResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{25}
}

type AckTestExecutionFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string                 `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
	FinishTime      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Error           *string                `protobuf:"bytes,4,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *AckTestExecutionFinishedRequest) Reset() {
	*x = AckTestExecutionFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckTestExecutionFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckTestExecutionFinishedRequest) ProtoMessage() {}

func (x *AckTestExecutionFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckTestExecutionFinishedRequest.ProtoReflect.Descriptor instead.
func (*AckTestExecutionFinishedRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{26}
}

func (x *AckTestExecutionFinishedRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AckTestExecutionFinishedRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

func (x *AckTestExecutionFinishedRequest) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *AckTestExecutionFinishedRequest) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type AckTestExecutionFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckTestExecutionFinishedResponse) Reset() {
	*x = AckTestExecutionFinishedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckTestExecutionFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckTestExecutionFinishedResponse) ProtoMessage() {}

func (x *AckTestExecutionFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckTestExecutionFinishedResponse.ProtoReflect.Descriptor instead.
func (*AckTestExecutionFinishedResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{27}
}

type AckCaseExecutionScheduledRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string                 `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
	CaseExecutionId int32                  `protobuf:"varint,3,opt,name=case_execution_id,json=caseExecutionId,proto3" json:"case_execution_id,omitempty"`
	CaseName        string                 `protobuf:"bytes,4,opt,name=case_name,json=caseName,proto3" json:"case_name,omitempty"`
	ScheduleTime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=schedule_time,json=scheduleTime,proto3" json:"schedule_time,omitempty"`
}

func (x *AckCaseExecutionScheduledRequest) Reset() {
	*x = AckCaseExecutionScheduledRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCaseExecutionScheduledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCaseExecutionScheduledRequest) ProtoMessage() {}

func (x *AckCaseExecutionScheduledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCaseExecutionScheduledRequest.ProtoReflect.Descriptor instead.
func (*AckCaseExecutionScheduledRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{28}
}

func (x *AckCaseExecutionScheduledRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AckCaseExecutionScheduledRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

func (x *AckCaseExecutionScheduledRequest) GetCaseExecutionId() int32 {
	if x != nil {
		return x.CaseExecutionId
	}
	return 0
}

func (x *AckCaseExecutionScheduledRequest) GetCaseName() string {
	if x != nil {
		return x.CaseName
	}
	return ""
}

func (x *AckCaseExecutionScheduledRequest) GetScheduleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ScheduleTime
	}
	return nil
}

type AckCaseExecutionScheduledResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckCaseExecutionScheduledResponse) Reset() {
	*x = AckCaseExecutionScheduledResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCaseExecutionScheduledResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCaseExecutionScheduledResponse) ProtoMessage() {}

func (x *AckCaseExecutionScheduledResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCaseExecutionScheduledResponse.ProtoReflect.Descriptor instead.
func (*AckCaseExecutionScheduledResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{29}
}

type AckCaseExecutionStartedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string                 `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
	CaseExecutionId int32                  `protobuf:"varint,3,opt,name=case_execution_id,json=caseExecutionId,proto3" json:"case_execution_id,omitempty"`
	StartTime       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *AckCaseExecutionStartedRequest) Reset() {
	*x = AckCaseExecutionStartedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCaseExecutionStartedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCaseExecutionStartedRequest) ProtoMessage() {}

func (x *AckCaseExecutionStartedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCaseExecutionStartedRequest.ProtoReflect.Descriptor instead.
func (*AckCaseExecutionStartedRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{30}
}

func (x *AckCaseExecutionStartedRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AckCaseExecutionStartedRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

func (x *AckCaseExecutionStartedRequest) GetCaseExecutionId() int32 {
	if x != nil {
		return x.CaseExecutionId
	}
	return 0
}

func (x *AckCaseExecutionStartedRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type AckCaseExecutionStartedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckCaseExecutionStartedResponse) Reset() {
	*x = AckCaseExecutionStartedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCaseExecutionStartedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCaseExecutionStartedResponse) ProtoMessage() {}

func (x *AckCaseExecutionStartedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCaseExecutionStartedResponse.ProtoReflect.Descriptor instead.
func (*AckCaseExecutionStartedResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{31}
}

type AckCaseExecutionFinishedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string                 `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
	CaseExecutionId int32                  `protobuf:"varint,3,opt,name=case_execution_id,json=caseExecutionId,proto3" json:"case_execution_id,omitempty"`
	FinishTime      *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	Error           *string                `protobuf:"bytes,5,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *AckCaseExecutionFinishedRequest) Reset() {
	*x = AckCaseExecutionFinishedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCaseExecutionFinishedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCaseExecutionFinishedRequest) ProtoMessage() {}

func (x *AckCaseExecutionFinishedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCaseExecutionFinishedRequest.ProtoReflect.Descriptor instead.
func (*AckCaseExecutionFinishedRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{32}
}

func (x *AckCaseExecutionFinishedRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *AckCaseExecutionFinishedRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

func (x *AckCaseExecutionFinishedRequest) GetCaseExecutionId() int32 {
	if x != nil {
		return x.CaseExecutionId
	}
	return 0
}

func (x *AckCaseExecutionFinishedRequest) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *AckCaseExecutionFinishedRequest) GetError() string {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return ""
}

type AckCaseExecutionFinishedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckCaseExecutionFinishedResponse) Reset() {
	*x = AckCaseExecutionFinishedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckCaseExecutionFinishedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckCaseExecutionFinishedResponse) ProtoMessage() {}

func (x *AckCaseExecutionFinishedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckCaseExecutionFinishedResponse.ProtoReflect.Descriptor instead.
func (*AckCaseExecutionFinishedResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{33}
}

type PublishTestExecutionLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string                 `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string                 `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
	CaseExecutionId *int32                 `protobuf:"varint,3,opt,name=case_execution_id,json=caseExecutionId,proto3,oneof" json:"case_execution_id,omitempty"`
	Level           string                 `protobuf:"bytes,4,opt,name=level,proto3" json:"level,omitempty"`
	Message         string                 `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	CreateTime      *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *PublishTestExecutionLogRequest) Reset() {
	*x = PublishTestExecutionLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishTestExecutionLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTestExecutionLogRequest) ProtoMessage() {}

func (x *PublishTestExecutionLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTestExecutionLogRequest.ProtoReflect.Descriptor instead.
func (*PublishTestExecutionLogRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{34}
}

func (x *PublishTestExecutionLogRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *PublishTestExecutionLogRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

func (x *PublishTestExecutionLogRequest) GetCaseExecutionId() int32 {
	if x != nil && x.CaseExecutionId != nil {
		return *x.CaseExecutionId
	}
	return 0
}

func (x *PublishTestExecutionLogRequest) GetLevel() string {
	if x != nil {
		return x.Level
	}
	return ""
}

func (x *PublishTestExecutionLogRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PublishTestExecutionLogRequest) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type PublishTestExecutionLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LogId string `protobuf:"bytes,1,opt,name=log_id,json=logId,proto3" json:"log_id,omitempty"`
}

func (x *PublishTestExecutionLogResponse) Reset() {
	*x = PublishTestExecutionLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishTestExecutionLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishTestExecutionLogResponse) ProtoMessage() {}

func (x *PublishTestExecutionLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishTestExecutionLogResponse.ProtoReflect.Descriptor instead.
func (*PublishTestExecutionLogResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{35}
}

func (x *PublishTestExecutionLogResponse) GetLogId() string {
	if x != nil {
		return x.LogId
	}
	return ""
}

type ListTestExecutionLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context         string `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	TestExecutionId string `protobuf:"bytes,2,opt,name=test_execution_id,json=testExecutionId,proto3" json:"test_execution_id,omitempty"`
}

func (x *ListTestExecutionLogsRequest) Reset() {
	*x = ListTestExecutionLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestExecutionLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestExecutionLogsRequest) ProtoMessage() {}

func (x *ListTestExecutionLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestExecutionLogsRequest.ProtoReflect.Descriptor instead.
func (*ListTestExecutionLogsRequest) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{36}
}

func (x *ListTestExecutionLogsRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ListTestExecutionLogsRequest) GetTestExecutionId() string {
	if x != nil {
		return x.TestExecutionId
	}
	return ""
}

type ListTestExecutionLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *ListTestExecutionLogsResponse) Reset() {
	*x = ListTestExecutionLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_annex_tests_v1_test_service_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTestExecutionLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTestExecutionLogsResponse) ProtoMessage() {}

func (x *ListTestExecutionLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_annex_tests_v1_test_service_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTestExecutionLogsResponse.ProtoReflect.Descriptor instead.
func (*ListTestExecutionLogsResponse) Descriptor() ([]byte, []int) {
	return file_annex_tests_v1_test_service_proto_rawDescGZIP(), []int{37}
}

func (x *ListTestExecutionLogsResponse) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

var File_annex_tests_v1_test_service_proto protoreflect.FileDescriptor

var file_annex_tests_v1_test_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x19, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a,
	0x16, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x44, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x17, 0x0a,
	0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x43, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x52, 0x05, 0x74, 0x65, 0x73, 0x74, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4f, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x42,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x5b, 0x0a, 0x13, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x19, 0x52, 0x65, 0x74, 0x72, 0x79,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1a, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0x9e, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0e,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x22, 0x93, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8c, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x65, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x1e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x63, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x6b, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x63,
	0x6b, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc9, 0x01,
	0x0a, 0x1f, 0x41, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x63, 0x6b,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf2, 0x01,
	0x0a, 0x20, 0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x23, 0x0a, 0x21, 0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xcd, 0x01, 0x0a, 0x1e, 0x41, 0x63, 0x6b, 0x43,
	0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x63, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x41, 0x63, 0x6b, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf5, 0x01, 0x0a, 0x1f, 0x41,
	0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x63, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x22, 0x0a, 0x20, 0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x1e, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x2f, 0x0a, 0x11, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x1f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x22, 0x64, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x48, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x32, 0xd5, 0x14,
	0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a,
	0x0c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x23, 0x2e,
	0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x12, 0x7e, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x12, 0x21, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12,
	0x21, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x7a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x20, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x12, 0xb0,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x7d, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x2d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x88, 0x01, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x7d, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xb7, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x44, 0x3a, 0x01, 0x2a, 0x22, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x7d, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x7d, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x7d, 0x12, 0x9a, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12, 0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x7d, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xc0,
	0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41,
	0x12, 0x3f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40,
	0x12, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x7d, 0x2f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0x12, 0x62, 0x0a, 0x0f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x26, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x7a, 0x0a, 0x17, 0x41, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18,
	0x41, 0x63, 0x6b, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19,
	0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a,
	0x0a, 0x17, 0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6e, 0x6e, 0x65,
	0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x18, 0x41, 0x63,
	0x6b, 0x43, 0x61, 0x73, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2f, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x17, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x54, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x2e, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x54, 0x65, 0x73,
	0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xbe, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6e,
	0x6e, 0x65, 0x78, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6e,
	0x65, 0x78, 0x73, 0x68, 0x2f, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x6e, 0x6e, 0x65, 0x78, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x73, 0x76, 0x31, 0xa2, 0x02,
	0x03, 0x41, 0x54, 0x58, 0xaa, 0x02, 0x0e, 0x41, 0x6e, 0x6e, 0x65, 0x78, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x41, 0x6e, 0x6e, 0x65, 0x78, 0x5c, 0x54, 0x65,
	0x73, 0x74, 0x73, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x41, 0x6e, 0x6e, 0x65, 0x78, 0x5c, 0x54,
	0x65, 0x73, 0x74, 0x73, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x41, 0x6e, 0x6e, 0x65, 0x78, 0x3a, 0x3a, 0x54, 0x65, 0x73,
	0x74, 0x73, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_annex_tests_v1_test_service_proto_rawDescOnce sync.Once
	file_annex_tests_v1_test_service_proto_rawDescData = file_annex_tests_v1_test_service_proto_rawDesc
)

func file_annex_tests_v1_test_service_proto_rawDescGZIP() []byte {
	file_annex_tests_v1_test_service_proto_rawDescOnce.Do(func() {
		file_annex_tests_v1_test_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_annex_tests_v1_test_service_proto_rawDescData)
	})
	return file_annex_tests_v1_test_service_proto_rawDescData
}

var file_annex_tests_v1_test_service_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_annex_tests_v1_test_service_proto_goTypes = []any{
	(*RegisterContextRequest)(nil),            // 0: annex.tests.v1.RegisterContextRequest
	(*RegisterContextResponse)(nil),           // 1: annex.tests.v1.RegisterContextResponse
	(*ListContextsRequest)(nil),               // 2: annex.tests.v1.ListContextsRequest
	(*ListContextsResponse)(nil),              // 3: annex.tests.v1.ListContextsResponse
	(*RegisterGroupRequest)(nil),              // 4: annex.tests.v1.RegisterGroupRequest
	(*RegisterGroupResponse)(nil),             // 5: annex.tests.v1.RegisterGroupResponse
	(*ListGroupsRequest)(nil),                 // 6: annex.tests.v1.ListGroupsRequest
	(*ListGroupsResponse)(nil),                // 7: annex.tests.v1.ListGroupsResponse
	(*RegisterTestsRequest)(nil),              // 8: annex.tests.v1.RegisterTestsRequest
	(*RegisterTestsResponse)(nil),             // 9: annex.tests.v1.RegisterTestsResponse
	(*ListTestsRequest)(nil),                  // 10: annex.tests.v1.ListTestsRequest
	(*ListTestsResponse)(nil),                 // 11: annex.tests.v1.ListTestsResponse
	(*GetTestDefaultInputRequest)(nil),        // 12: annex.tests.v1.GetTestDefaultInputRequest
	(*GetTestDefaultInputResponse)(nil),       // 13: annex.tests.v1.GetTestDefaultInputResponse
	(*ExecuteTestRequest)(nil),                // 14: annex.tests.v1.ExecuteTestRequest
	(*ExecuteTestResponse)(nil),               // 15: annex.tests.v1.ExecuteTestResponse
	(*RetryTestExecutionRequest)(nil),         // 16: annex.tests.v1.RetryTestExecutionRequest
	(*RetryTestExecutionResponse)(nil),        // 17: annex.tests.v1.RetryTestExecutionResponse
	(*GetTestExecutionRequest)(nil),           // 18: annex.tests.v1.GetTestExecutionRequest
	(*GetTestExecutionResponse)(nil),          // 19: annex.tests.v1.GetTestExecutionResponse
	(*ListTestExecutionsRequest)(nil),         // 20: annex.tests.v1.ListTestExecutionsRequest
	(*ListTestExecutionsResponse)(nil),        // 21: annex.tests.v1.ListTestExecutionsResponse
	(*ListTestCaseExecutionsRequest)(nil),     // 22: annex.tests.v1.ListTestCaseExecutionsRequest
	(*ListTestCaseExecutionsResponse)(nil),    // 23: annex.tests.v1.ListTestCaseExecutionsResponse
	(*AckTestExecutionStartedRequest)(nil),    // 24: annex.tests.v1.AckTestExecutionStartedRequest
	(*AckTestExecutionStartedResponse)(nil),   // 25: annex.tests.v1.AckTestExecutionStartedResponse
	(*AckTestExecutionFinishedRequest)(nil),   // 26: annex.tests.v1.AckTestExecutionFinishedRequest
	(*AckTestExecutionFinishedResponse)(nil),  // 27: annex.tests.v1.AckTestExecutionFinishedResponse
	(*AckCaseExecutionScheduledRequest)(nil),  // 28: annex.tests.v1.AckCaseExecutionScheduledRequest
	(*AckCaseExecutionScheduledResponse)(nil), // 29: annex.tests.v1.AckCaseExecutionScheduledResponse
	(*AckCaseExecutionStartedRequest)(nil),    // 30: annex.tests.v1.AckCaseExecutionStartedRequest
	(*AckCaseExecutionStartedResponse)(nil),   // 31: annex.tests.v1.AckCaseExecutionStartedResponse
	(*AckCaseExecutionFinishedRequest)(nil),   // 32: annex.tests.v1.AckCaseExecutionFinishedRequest
	(*AckCaseExecutionFinishedResponse)(nil),  // 33: annex.tests.v1.AckCaseExecutionFinishedResponse
	(*PublishTestExecutionLogRequest)(nil),    // 34: annex.tests.v1.PublishTestExecutionLogRequest
	(*PublishTestExecutionLogResponse)(nil),   // 35: annex.tests.v1.PublishTestExecutionLogResponse
	(*ListTestExecutionLogsRequest)(nil),      // 36: annex.tests.v1.ListTestExecutionLogsRequest
	(*ListTestExecutionLogsResponse)(nil),     // 37: annex.tests.v1.ListTestExecutionLogsResponse
	(*Group)(nil),                             // 38: annex.tests.v1.Group
	(*TestDefinition)(nil),                    // 39: annex.tests.v1.TestDefinition
	(*Test)(nil),                              // 40: annex.tests.v1.Test
	(*Payload)(nil),                           // 41: annex.tests.v1.Payload
	(*TestExecution)(nil),                     // 42: annex.tests.v1.TestExecution
	(*CaseExecution)(nil),                     // 43: annex.tests.v1.CaseExecution
	(*timestamppb.Timestamp)(nil),             // 44: google.protobuf.Timestamp
	(*Log)(nil),                               // 45: annex.tests.v1.Log
}
var file_annex_tests_v1_test_service_proto_depIdxs = []int32{
	38, // 0: annex.tests.v1.ListGroupsResponse.groups:type_name -> annex.tests.v1.Group
	39, // 1: annex.tests.v1.RegisterTestsRequest.definitions:type_name -> annex.tests.v1.TestDefinition
	40, // 2: annex.tests.v1.RegisterTestsResponse.tests:type_name -> annex.tests.v1.Test
	40, // 3: annex.tests.v1.ListTestsResponse.tests:type_name -> annex.tests.v1.Test
	41, // 4: annex.tests.v1.ExecuteTestRequest.input:type_name -> annex.tests.v1.Payload
	42, // 5: annex.tests.v1.ExecuteTestResponse.test_execution:type_name -> annex.tests.v1.TestExecution
	42, // 6: annex.tests.v1.RetryTestExecutionResponse.test_execution:type_name -> annex.tests.v1.TestExecution
	42, // 7: annex.tests.v1.GetTestExecutionResponse.test_execution:type_name -> annex.tests.v1.TestExecution
	41, // 8: annex.tests.v1.GetTestExecutionResponse.input:type_name -> annex.tests.v1.Payload
	42, // 9: annex.tests.v1.ListTestExecutionsResponse.test_executions:type_name -> annex.tests.v1.TestExecution
	43, // 10: annex.tests.v1.ListTestCaseExecutionsResponse.case_executions:type_name -> annex.tests.v1.CaseExecution
	44, // 11: annex.tests.v1.AckTestExecutionStartedRequest.start_time:type_name -> google.protobuf.Timestamp
	44, // 12: annex.tests.v1.AckTestExecutionFinishedRequest.finish_time:type_name -> google.protobuf.Timestamp
	44, // 13: annex.tests.v1.AckCaseExecutionScheduledRequest.schedule_time:type_name -> google.protobuf.Timestamp
	44, // 14: annex.tests.v1.AckCaseExecutionStartedRequest.start_time:type_name -> google.protobuf.Timestamp
	44, // 15: annex.tests.v1.AckCaseExecutionFinishedRequest.finish_time:type_name -> google.protobuf.Timestamp
	44, // 16: annex.tests.v1.PublishTestExecutionLogRequest.create_time:type_name -> google.protobuf.Timestamp
	45, // 17: annex.tests.v1.ListTestExecutionLogsResponse.logs:type_name -> annex.tests.v1.Log
	2,  // 18: annex.tests.v1.TestService.ListContexts:input_type -> annex.tests.v1.ListContextsRequest
	6,  // 19: annex.tests.v1.TestService.ListGroups:input_type -> annex.tests.v1.ListGroupsRequest
	10, // 20: annex.tests.v1.TestService.ListTests:input_type -> annex.tests.v1.ListTestsRequest
	12, // 21: annex.tests.v1.TestService.GetTestDefaultInput:input_type -> annex.tests.v1.GetTestDefaultInputRequest
	14, // 22: annex.tests.v1.TestService.ExecuteTest:input_type -> annex.tests.v1.ExecuteTestRequest
	16, // 23: annex.tests.v1.TestService.RetryTestExecution:input_type -> annex.tests.v1.RetryTestExecutionRequest
	18, // 24: annex.tests.v1.TestService.GetTestExecution:input_type -> annex.tests.v1.GetTestExecutionRequest
	20, // 25: annex.tests.v1.TestService.ListTestExecutions:input_type -> annex.tests.v1.ListTestExecutionsRequest
	22, // 26: annex.tests.v1.TestService.ListTestCaseExecutions:input_type -> annex.tests.v1.ListTestCaseExecutionsRequest
	36, // 27: annex.tests.v1.TestService.ListTestExecutionLogs:input_type -> annex.tests.v1.ListTestExecutionLogsRequest
	0,  // 28: annex.tests.v1.TestService.RegisterContext:input_type -> annex.tests.v1.RegisterContextRequest
	4,  // 29: annex.tests.v1.TestService.RegisterGroup:input_type -> annex.tests.v1.RegisterGroupRequest
	8,  // 30: annex.tests.v1.TestService.RegisterTests:input_type -> annex.tests.v1.RegisterTestsRequest
	24, // 31: annex.tests.v1.TestService.AckTestExecutionStarted:input_type -> annex.tests.v1.AckTestExecutionStartedRequest
	26, // 32: annex.tests.v1.TestService.AckTestExecutionFinished:input_type -> annex.tests.v1.AckTestExecutionFinishedRequest
	28, // 33: annex.tests.v1.TestService.AckCaseExecutionScheduled:input_type -> annex.tests.v1.AckCaseExecutionScheduledRequest
	30, // 34: annex.tests.v1.TestService.AckCaseExecutionStarted:input_type -> annex.tests.v1.AckCaseExecutionStartedRequest
	32, // 35: annex.tests.v1.TestService.AckCaseExecutionFinished:input_type -> annex.tests.v1.AckCaseExecutionFinishedRequest
	34, // 36: annex.tests.v1.TestService.PublishTestExecutionLog:input_type -> annex.tests.v1.PublishTestExecutionLogRequest
	3,  // 37: annex.tests.v1.TestService.ListContexts:output_type -> annex.tests.v1.ListContextsResponse
	7,  // 38: annex.tests.v1.TestService.ListGroups:output_type -> annex.tests.v1.ListGroupsResponse
	11, // 39: annex.tests.v1.TestService.ListTests:output_type -> annex.tests.v1.ListTestsResponse
	13, // 40: annex.tests.v1.TestService.GetTestDefaultInput:output_type -> annex.tests.v1.GetTestDefaultInputResponse
	15, // 41: annex.tests.v1.TestService.ExecuteTest:output_type -> annex.tests.v1.ExecuteTestResponse
	17, // 42: annex.tests.v1.TestService.RetryTestExecution:output_type -> annex.tests.v1.RetryTestExecutionResponse
	19, // 43: annex.tests.v1.TestService.GetTestExecution:output_type -> annex.tests.v1.GetTestExecutionResponse
	21, // 44: annex.tests.v1.TestService.ListTestExecutions:output_type -> annex.tests.v1.ListTestExecutionsResponse
	23, // 45: annex.tests.v1.TestService.ListTestCaseExecutions:output_type -> annex.tests.v1.ListTestCaseExecutionsResponse
	37, // 46: annex.tests.v1.TestService.ListTestExecutionLogs:output_type -> annex.tests.v1.ListTestExecutionLogsResponse
	1,  // 47: annex.tests.v1.TestService.RegisterContext:output_type -> annex.tests.v1.RegisterContextResponse
	5,  // 48: annex.tests.v1.TestService.RegisterGroup:output_type -> annex.tests.v1.RegisterGroupResponse
	9,  // 49: annex.tests.v1.TestService.RegisterTests:output_type -> annex.tests.v1.RegisterTestsResponse
	25, // 50: annex.tests.v1.TestService.AckTestExecutionStarted:output_type -> annex.tests.v1.AckTestExecutionStartedResponse
	27, // 51: annex.tests.v1.TestService.AckTestExecutionFinished:output_type -> annex.tests.v1.AckTestExecutionFinishedResponse
	29, // 52: annex.tests.v1.TestService.AckCaseExecutionScheduled:output_type -> annex.tests.v1.AckCaseExecutionScheduledResponse
	31, // 53: annex.tests.v1.TestService.AckCaseExecutionStarted:output_type -> annex.tests.v1.AckCaseExecutionStartedResponse
	33, // 54: annex.tests.v1.TestService.AckCaseExecutionFinished:output_type -> annex.tests.v1.AckCaseExecutionFinishedResponse
	35, // 55: annex.tests.v1.TestService.PublishTestExecutionLog:output_type -> annex.tests.v1.PublishTestExecutionLogResponse
	37, // [37:56] is the sub-list for method output_type
	18, // [18:37] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_annex_tests_v1_test_service_proto_init() }
func file_annex_tests_v1_test_service_proto_init() {
	if File_annex_tests_v1_test_service_proto != nil {
		return
	}
	file_annex_tests_v1_test_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_annex_tests_v1_test_service_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterContextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListContextsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListContextsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestDefaultInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestDefaultInputResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ExecuteTestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*RetryTestExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RetryTestExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetTestExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestCaseExecutionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestCaseExecutionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AckTestExecutionStartedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AckTestExecutionStartedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*AckTestExecutionFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*AckTestExecutionFinishedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*AckCaseExecutionScheduledRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*AckCaseExecutionScheduledResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*AckCaseExecutionStartedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*AckCaseExecutionStartedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*AckCaseExecutionFinishedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*AckCaseExecutionFinishedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*PublishTestExecutionLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*PublishTestExecutionLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestExecutionLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_annex_tests_v1_test_service_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ListTestExecutionLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_annex_tests_v1_test_service_proto_msgTypes[14].OneofWrappers = []any{}
	file_annex_tests_v1_test_service_proto_msgTypes[19].OneofWrappers = []any{}
	file_annex_tests_v1_test_service_proto_msgTypes[26].OneofWrappers = []any{}
	file_annex_tests_v1_test_service_proto_msgTypes[32].OneofWrappers = []any{}
	file_annex_tests_v1_test_service_proto_msgTypes[34].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_annex_tests_v1_test_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_annex_tests_v1_test_service_proto_goTypes,
		DependencyIndexes: file_annex_tests_v1_test_service_proto_depIdxs,
		MessageInfos:      file_annex_tests_v1_test_service_proto_msgTypes,
	}.Build()
	File_annex_tests_v1_test_service_proto = out.File
	file_annex_tests_v1_test_service_proto_rawDesc = nil
	file_annex_tests_v1_test_service_proto_goTypes = nil
	file_annex_tests_v1_test_service_proto_depIdxs = nil
}
