syntax = "proto3";

package annex.tests.v1;

import "annex/tests/v1/test.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

message RegisterContextRequest {
  string context = 1;
}

message RegisterContextResponse {}

message ListContextsRequest {}

message ListContextsResponse {
  repeated string contexts = 1;
}

message RegisterGroupRequest {
  string context = 1;
  string name = 2;
}

message RegisterGroupResponse {}

message ListGroupsRequest {
  string context = 1;
}

message ListGroupsResponse {
  repeated Group groups = 1;
}

message RegisterTestsRequest {
  string context = 1;
  string group = 2;
  repeated TestDefinition definitions = 4;
}

message RegisterTestsResponse {
  repeated Test tests = 1;
}

message ListTestsRequest {
  string context = 1;
  string group = 2;
  int32 page_size = 3;
  string next_page_token = 4;
}

message ListTestsResponse {
  repeated Test tests = 1;
  string next_page_token = 2;
}

message GetTestRequest {
  string context = 1;
  string test_id = 2;
}

message GetTestResponse {
  Test test = 1;
}

message GetTestDefaultInputRequest {
  string context = 1;
  string test_id = 2;
}

message GetTestDefaultInputResponse {
  string default_input = 1;
}

message ExecuteTestRequest {
  string context = 1;
  string test_id = 2;
  optional Payload input = 3;
}

message ExecuteTestResponse {
  TestExecution test_execution = 1;
}

message RetryTestExecutionRequest {
  string context = 1;
  string test_execution_id = 2;
}

message RetryTestExecutionResponse {
  TestExecution test_execution = 1;
}

message GetTestExecutionRequest {
  string context = 1;
  string test_execution_id = 2;
}

message GetTestExecutionResponse {
  TestExecution test_execution = 1;
  optional Payload input = 2;
}

message ListTestExecutionsRequest {
  string context = 1;
  string test_id = 2;
  int32 page_size = 3;
  string next_page_token = 4;
}

message ListTestExecutionsResponse {
  repeated TestExecution test_executions = 1;
  string next_page_token = 2;
}

message ListCaseExecutionsRequest {
  string context = 1;
  string test_execution_id = 2;
}

message ListCaseExecutionsResponse {
  repeated CaseExecution case_executions = 1;
}

message AckTestExecutionStartedRequest {
  string context = 1;
  string test_execution_id = 2;
  google.protobuf.Timestamp start_time = 3;
}

message AckTestExecutionStartedResponse {}

message AckTestExecutionFinishedRequest {
  string context = 1;
  string test_execution_id = 2;
  google.protobuf.Timestamp finish_time = 3;
  optional string error = 4;
}

message AckTestExecutionFinishedResponse {}

message AckCaseExecutionScheduledRequest {
  string context = 1;
  string test_execution_id = 2;
  int32 case_execution_id = 3;
  string case_name = 4;
  google.protobuf.Timestamp schedule_time = 5;
}

message AckCaseExecutionScheduledResponse {}

message AckCaseExecutionStartedRequest {
  string context = 1;
  string test_execution_id = 2;
  int32 case_execution_id = 3;
  google.protobuf.Timestamp start_time = 4;
}

message AckCaseExecutionStartedResponse {}

message AckCaseExecutionFinishedRequest {
  string context = 1;
  string test_execution_id = 2;
  int32 case_execution_id = 3;
  google.protobuf.Timestamp finish_time = 4;
  optional string error = 5;
}

message AckCaseExecutionFinishedResponse {}

message PublishLogRequest {
  string context = 1;
  string test_execution_id = 2;
  optional int32 case_execution_id = 3;
  string level = 4;
  string message = 5;
  google.protobuf.Timestamp create_time = 6;
}

message PublishLogResponse {
  string log_id = 1;
}

message ListTestExecutionLogsRequest {
  string context = 1;
  string test_execution_id = 2;
}

message ListTestExecutionLogsResponse {
  repeated Log logs = 1;
}

service TestService {
  rpc ListContexts(ListContextsRequest) returns (ListContextsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts"};
  }

  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/groups"};
  }

  rpc ListTests(ListTestsRequest) returns (ListTestsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/tests"};
  }

  rpc GetTest(GetTestRequest) returns (GetTestResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/tests/{test_id}"};
  }

  rpc GetTestDefaultInput(GetTestDefaultInputRequest) returns (GetTestDefaultInputResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/tests/{test_id}/default-input"};
  }

  rpc ExecuteTest(ExecuteTestRequest) returns (ExecuteTestResponse) {
    option (google.api.http) = {
      post: "/api/v1/contexts/{context}/executions"
      body: "*"
    };
  }

  rpc RetryTestExecution(RetryTestExecutionRequest) returns (RetryTestExecutionResponse) {
    option (google.api.http) = {
      post: "/api/v1/contexts/{context}/executions/{test_execution_id}/retry"
      body: "*"
    };
  }

  rpc GetTestExecution(GetTestExecutionRequest) returns (GetTestExecutionResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions/{test_execution_id}"};
  }

  rpc ListTestExecutions(ListTestExecutionsRequest) returns (ListTestExecutionsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions"};
  }

  rpc ListCaseExecutions(ListCaseExecutionsRequest) returns (ListCaseExecutionsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions/{test_execution_id}/cases"};
  }

  rpc ListTestExecutionLogs(ListTestExecutionLogsRequest) returns (ListTestExecutionLogsResponse) {
    option (google.api.http) = {get: "/api/v1/contexts/{context}/executions/{test_execution_id}/logs"};
  }

  rpc RegisterContext(RegisterContextRequest) returns (RegisterContextResponse);

  rpc RegisterGroup(RegisterGroupRequest) returns (RegisterGroupResponse);

  rpc RegisterTests(RegisterTestsRequest) returns (RegisterTestsResponse);

  rpc AckTestExecutionStarted(AckTestExecutionStartedRequest) returns (AckTestExecutionStartedResponse);

  rpc AckTestExecutionFinished(AckTestExecutionFinishedRequest) returns (AckTestExecutionFinishedResponse);

  rpc AckCaseExecutionScheduled(AckCaseExecutionScheduledRequest) returns (AckCaseExecutionScheduledResponse);

  rpc AckCaseExecutionStarted(AckCaseExecutionStartedRequest) returns (AckCaseExecutionStartedResponse);

  rpc AckCaseExecutionFinished(AckCaseExecutionFinishedRequest) returns (AckCaseExecutionFinishedResponse);

  rpc PublishLog(PublishLogRequest) returns (PublishLogResponse);
}
