"use strict";
// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file annex/tests/v1/test.proto (package annex.tests.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.Payload = exports.Log = exports.CaseExecution = exports.TestExecution = exports.Test = exports.TestDefinition = exports.TestSuite_Runner = exports.TestSuite = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 * @generated from message annex.tests.v1.TestSuite
 */
class TestSuite extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string context = 1;
         */
        this.context = "";
        /**
         * @generated from field: string id = 2;
         */
        this.id = "";
        /**
         * @generated from field: string name = 3;
         */
        this.name = "";
        /**
         * @generated from field: repeated annex.tests.v1.TestSuite.Runner runners = 5;
         */
        this.runners = [];
        /**
         * @generated from field: bool available = 6;
         */
        this.available = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TestSuite().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TestSuite().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TestSuite().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TestSuite, a, b);
    }
}
exports.TestSuite = TestSuite;
TestSuite.runtime = protobuf_1.proto3;
TestSuite.typeName = "annex.tests.v1.TestSuite";
TestSuite.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "runners", kind: "message", T: TestSuite_Runner, repeated: true },
    { no: 6, name: "available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 * @generated from message annex.tests.v1.TestSuite.Runner
 */
class TestSuite_Runner extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TestSuite_Runner().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TestSuite_Runner().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TestSuite_Runner().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TestSuite_Runner, a, b);
    }
}
exports.TestSuite_Runner = TestSuite_Runner;
TestSuite_Runner.runtime = protobuf_1.proto3;
TestSuite_Runner.typeName = "annex.tests.v1.TestSuite.Runner";
TestSuite_Runner.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_access_time", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message annex.tests.v1.TestDefinition
 */
class TestDefinition extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string name = 1;
         */
        this.name = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TestDefinition().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TestDefinition().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TestDefinition().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TestDefinition, a, b);
    }
}
exports.TestDefinition = TestDefinition;
TestDefinition.runtime = protobuf_1.proto3;
TestDefinition.typeName = "annex.tests.v1.TestDefinition";
TestDefinition.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "default_input", kind: "message", T: Payload, opt: true },
]);
/**
 * @generated from message annex.tests.v1.Test
 */
class Test extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string context = 1;
         */
        this.context = "";
        /**
         * @generated from field: string test_suite_id = 2;
         */
        this.testSuiteId = "";
        /**
         * @generated from field: string id = 3;
         */
        this.id = "";
        /**
         * @generated from field: string name = 4;
         */
        this.name = "";
        /**
         * @generated from field: bool has_input = 6;
         */
        this.hasInput = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Test().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Test().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Test().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Test, a, b);
    }
}
exports.Test = Test;
Test.runtime = protobuf_1.proto3;
Test.typeName = "annex.tests.v1.Test";
Test.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_suite_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "has_input", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "create_time", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message annex.tests.v1.TestExecution
 */
class TestExecution extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * @generated from field: string test_id = 2;
         */
        this.testId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new TestExecution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new TestExecution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new TestExecution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(TestExecution, a, b);
    }
}
exports.TestExecution = TestExecution;
TestExecution.runtime = protobuf_1.proto3;
TestExecution.typeName = "annex.tests.v1.TestExecution";
TestExecution.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "schedule_time", kind: "message", T: protobuf_1.Timestamp },
    { no: 5, name: "start_time", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "finish_time", kind: "message", T: protobuf_1.Timestamp, opt: true },
]);
/**
 * @generated from message annex.tests.v1.CaseExecution
 */
class CaseExecution extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: int32 id = 1;
         */
        this.id = 0;
        /**
         * @generated from field: string case_name = 2;
         */
        this.caseName = "";
        /**
         * @generated from field: string test_execution_id = 3;
         */
        this.testExecutionId = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CaseExecution().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CaseExecution().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CaseExecution().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CaseExecution, a, b);
    }
}
exports.CaseExecution = CaseExecution;
CaseExecution.runtime = protobuf_1.proto3;
CaseExecution.typeName = "annex.tests.v1.CaseExecution";
CaseExecution.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "case_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "schedule_time", kind: "message", T: protobuf_1.Timestamp },
    { no: 6, name: "start_time", kind: "message", T: protobuf_1.Timestamp, opt: true },
    { no: 7, name: "finish_time", kind: "message", T: protobuf_1.Timestamp, opt: true },
]);
/**
 * @generated from message annex.tests.v1.Log
 */
class Log extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: string id = 1;
         */
        this.id = "";
        /**
         * @generated from field: string test_execution_id = 2;
         */
        this.testExecutionId = "";
        /**
         * @generated from field: string level = 4;
         */
        this.level = "";
        /**
         * @generated from field: string message = 5;
         */
        this.message = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Log().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Log().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Log().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Log, a, b);
    }
}
exports.Log = Log;
Log.runtime = protobuf_1.proto3;
Log.typeName = "annex.tests.v1.Log";
Log.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case_execution_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "create_time", kind: "message", T: protobuf_1.Timestamp },
]);
/**
 * @generated from message annex.tests.v1.Payload
 */
class Payload extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * @generated from field: map<string, bytes> metadata = 1;
         */
        this.metadata = {};
        /**
         * @generated from field: bytes data = 2;
         */
        this.data = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Payload().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Payload().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Payload().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Payload, a, b);
    }
}
exports.Payload = Payload;
Payload.runtime = protobuf_1.proto3;
Payload.typeName = "annex.tests.v1.Payload";
Payload.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: { kind: "scalar", T: 12 /* ScalarType.BYTES */ } },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
