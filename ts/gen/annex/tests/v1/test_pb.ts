// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file annex/tests/v1/test.proto (package annex.tests.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message annex.tests.v1.TestSuite
 */
export class TestSuite extends Message<TestSuite> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string id = 2;
   */
  id = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: optional string description = 4;
   */
  description?: string;

  /**
   * @generated from field: repeated annex.tests.v1.TestSuite.Runner runners = 5;
   */
  runners: TestSuite_Runner[] = [];

  /**
   * @generated from field: bool available = 6;
   */
  available = false;

  constructor(data?: PartialMessage<TestSuite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.TestSuite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "runners", kind: "message", T: TestSuite_Runner, repeated: true },
    { no: 6, name: "available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSuite {
    return new TestSuite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSuite {
    return new TestSuite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSuite {
    return new TestSuite().fromJsonString(jsonString, options);
  }

  static equals(a: TestSuite | PlainMessage<TestSuite> | undefined, b: TestSuite | PlainMessage<TestSuite> | undefined): boolean {
    return proto3.util.equals(TestSuite, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.TestSuite.Runner
 */
export class TestSuite_Runner extends Message<TestSuite_Runner> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: google.protobuf.Timestamp last_access_time = 2;
   */
  lastAccessTime?: Timestamp;

  constructor(data?: PartialMessage<TestSuite_Runner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.TestSuite.Runner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "last_access_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestSuite_Runner {
    return new TestSuite_Runner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestSuite_Runner {
    return new TestSuite_Runner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestSuite_Runner {
    return new TestSuite_Runner().fromJsonString(jsonString, options);
  }

  static equals(a: TestSuite_Runner | PlainMessage<TestSuite_Runner> | undefined, b: TestSuite_Runner | PlainMessage<TestSuite_Runner> | undefined): boolean {
    return proto3.util.equals(TestSuite_Runner, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.TestDefinition
 */
export class TestDefinition extends Message<TestDefinition> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: optional string description = 2;
   */
  description?: string;

  /**
   * @generated from field: optional annex.tests.v1.Payload default_input = 3;
   */
  defaultInput?: Payload;

  constructor(data?: PartialMessage<TestDefinition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.TestDefinition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 3, name: "default_input", kind: "message", T: Payload, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestDefinition {
    return new TestDefinition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestDefinition {
    return new TestDefinition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestDefinition {
    return new TestDefinition().fromJsonString(jsonString, options);
  }

  static equals(a: TestDefinition | PlainMessage<TestDefinition> | undefined, b: TestDefinition | PlainMessage<TestDefinition> | undefined): boolean {
    return proto3.util.equals(TestDefinition, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.Test
 */
export class Test extends Message<Test> {
  /**
   * @generated from field: string context = 1;
   */
  context = "";

  /**
   * @generated from field: string test_suite_id = 2;
   */
  testSuiteId = "";

  /**
   * @generated from field: string id = 3;
   */
  id = "";

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: optional string description = 5;
   */
  description?: string;

  /**
   * @generated from field: bool has_input = 6;
   */
  hasInput = false;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<Test>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.Test";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_suite_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 6, name: "has_input", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "create_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Test {
    return new Test().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Test {
    return new Test().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Test {
    return new Test().fromJsonString(jsonString, options);
  }

  static equals(a: Test | PlainMessage<Test> | undefined, b: Test | PlainMessage<Test> | undefined): boolean {
    return proto3.util.equals(Test, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.TestExecution
 */
export class TestExecution extends Message<TestExecution> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string test_id = 2;
   */
  testId = "";

  /**
   * @generated from field: optional string error = 3;
   */
  error?: string;

  /**
   * @generated from field: google.protobuf.Timestamp schedule_time = 4;
   */
  scheduleTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp start_time = 5;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp finish_time = 6;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<TestExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.TestExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "schedule_time", kind: "message", T: Timestamp },
    { no: 5, name: "start_time", kind: "message", T: Timestamp },
    { no: 6, name: "finish_time", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestExecution {
    return new TestExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestExecution {
    return new TestExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestExecution {
    return new TestExecution().fromJsonString(jsonString, options);
  }

  static equals(a: TestExecution | PlainMessage<TestExecution> | undefined, b: TestExecution | PlainMessage<TestExecution> | undefined): boolean {
    return proto3.util.equals(TestExecution, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.CaseExecution
 */
export class CaseExecution extends Message<CaseExecution> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string case_name = 2;
   */
  caseName = "";

  /**
   * @generated from field: string test_execution_id = 3;
   */
  testExecutionId = "";

  /**
   * @generated from field: optional string error = 4;
   */
  error?: string;

  /**
   * @generated from field: google.protobuf.Timestamp schedule_time = 5;
   */
  scheduleTime?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp start_time = 6;
   */
  startTime?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp finish_time = 7;
   */
  finishTime?: Timestamp;

  constructor(data?: PartialMessage<CaseExecution>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.CaseExecution";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "case_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "schedule_time", kind: "message", T: Timestamp },
    { no: 6, name: "start_time", kind: "message", T: Timestamp, opt: true },
    { no: 7, name: "finish_time", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CaseExecution {
    return new CaseExecution().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CaseExecution {
    return new CaseExecution().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CaseExecution {
    return new CaseExecution().fromJsonString(jsonString, options);
  }

  static equals(a: CaseExecution | PlainMessage<CaseExecution> | undefined, b: CaseExecution | PlainMessage<CaseExecution> | undefined): boolean {
    return proto3.util.equals(CaseExecution, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.Log
 */
export class Log extends Message<Log> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string test_execution_id = 2;
   */
  testExecutionId = "";

  /**
   * @generated from field: optional int32 case_execution_id = 3;
   */
  caseExecutionId?: number;

  /**
   * @generated from field: string level = 4;
   */
  level = "";

  /**
   * @generated from field: string message = 5;
   */
  message = "";

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  constructor(data?: PartialMessage<Log>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.Log";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "test_execution_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "case_execution_id", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "level", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "create_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Log {
    return new Log().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJsonString(jsonString, options);
  }

  static equals(a: Log | PlainMessage<Log> | undefined, b: Log | PlainMessage<Log> | undefined): boolean {
    return proto3.util.equals(Log, a, b);
  }
}

/**
 * @generated from message annex.tests.v1.Payload
 */
export class Payload extends Message<Payload> {
  /**
   * @generated from field: map<string, bytes> metadata = 1;
   */
  metadata: { [key: string]: Uint8Array } = {};

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<Payload>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "annex.tests.v1.Payload";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 12 /* ScalarType.BYTES */} },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Payload {
    return new Payload().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Payload {
    return new Payload().fromJsonString(jsonString, options);
  }

  static equals(a: Payload | PlainMessage<Payload> | undefined, b: Payload | PlainMessage<Payload> | undefined): boolean {
    return proto3.util.equals(Payload, a, b);
  }
}

